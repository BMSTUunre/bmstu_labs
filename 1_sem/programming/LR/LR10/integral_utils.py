from utils import input_int, cramer_method
from math import sin, cos


''' Input Settings '''
def simple_func(x: int | float) -> int | float:
    """
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    return sin(x)


def antiderivative_func(x):
    """
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ü–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    return cos(x)


def get_eps():
    return 10 ** -5


''' Auto funcs '''

def cube_func(a, b, c):
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—é –≥–∏–ø–µ—Ä–±–æ–ª—ã.
    """
    return lambda x: a * x ** 3 + b * x ** 2 + c * x


def find_antiderivative_by_func(a, b, c):
    """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ü–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é –ø–∞—Ä–∞–±–æ–ª—ã –ø–æ –µ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º a b c.
    """
    return cube_func(a / 3, b / 2, c)


def integral_by_antiderivative(x1, x2, antiderivative=None):
    """
        –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –µ–µ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω–æ–π.
    """
    return antiderivative_func(x2) - antiderivative_func(x1) if antiderivative is None else antiderivative(x2) - antiderivative(x1)


def middle_rectangles(n: int, start: int | float, stop: int | float) -> float:
    """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –º–µ—Ç–æ–¥–æ–º —Å—É–º–º—ã –ø–ª–æ—â–∞–¥–µ–π —Å–µ—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.
        –°–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ –≤—ã—Å–æ—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –∞ –ø–æ—Ç–æ–º —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –æ–±—â—É—é —à–∏—Ä–∏–Ω—É

    """
    res = 0
    step_x = (stop - start) / n
    x = start
    while abs(x - stop) > get_eps():
        res += simple_func(x + step_x / 2)
        x += step_x

    res *= step_x
    return res


def parabola(n: int, start: int | float, stop: int | float) -> float:
    """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –º–µ—Ç–æ–¥–æ–º –ø–∞—Ä–∞–±–æ–ª (–º–µ—Ç–æ–¥ –°–∏–º–ø—Å–æ–Ω–∞).
        –í—ã–±–∏—Ä–∞–µ–º 3 —Ç–æ—á–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–Ω–æ—Å–∏–º –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–±–æ–ª—ã.
        –ú–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞ —Ä–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É, –Ω–∞—Ö–æ–¥—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã a b c –ø–∞—Ä–∞–±–æ–ª—ã.
        –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä–∞–±–æ–ª—ã.
        –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª –Ω–∞ —ç—Ç–∏—Ö –¥–≤—É—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö, –æ–Ω —Ä–∞–≤–µ–Ω —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—ã—Ö.
    """
    while n < 2 or n % 2:
        print('–î–ª—è –º–µ—Ç–æ–¥–∞ –ø–∞—Ä–∞–±–æ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ.')
        n = input_int('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤\n> ')

    res = 0
    cur_x = start
    step_x = (stop - start) / n
    while abs(cur_x - stop) > get_eps():
        mid_x = cur_x + step_x
        right_x = mid_x + step_x

        system = [
            [cur_x ** 2,        cur_x, 1,   simple_func(cur_x)],
            [mid_x ** 2,    mid_x, 1,       simple_func(mid_x)],
            [right_x ** 2,  right_x, 1,     simple_func(right_x)]
        ]

        a, b, c = cramer_method(system)
        antiderivative = find_antiderivative_by_func(a ,b, c)

        res += integral_by_antiderivative(cur_x, right_x, antiderivative)
        cur_x += 2 * step_x

    return res


def iteration_calc_n(method_type: int, start: int | float, stop: int | float):
    """
       –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–∞–∫–æ–π N, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–µ—Ä–Ω–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ:
            |ùêº(ùëÅ) ‚àí ùêº(2ùëÅ)| < Œµ

        method type:
        0 - rectangles
        1 - parabola

    """
    func = middle_rectangles if method_type == 0 else parabola
    eps = get_eps()

    n = 1 if method_type == 0 else 2   # —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø–∞—Ä–∞–±–æ–ª N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 2
    while abs(func(n, start, stop) - func(2 * n, start, stop)) >= eps:
        n += 1 if method_type == 0 else 2  # —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø–∞—Ä–∞–±–æ–ª N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 2
    return n
